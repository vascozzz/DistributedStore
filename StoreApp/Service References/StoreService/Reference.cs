//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StoreApp.StoreService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StoreService.IStoreServ")]
    public interface IStoreServ {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreServ/GetBooks", ReplyAction="http://tempuri.org/IStoreServ/GetBooksResponse")]
        System.Data.DataTable GetBooks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreServ/GetBooks", ReplyAction="http://tempuri.org/IStoreServ/GetBooksResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetBooksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreServ/AddOrder", ReplyAction="http://tempuri.org/IStoreServ/AddOrderResponse")]
        int AddOrder(int bookId, int quantity, string clientName, string clientAddress, string clientEmail, int origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreServ/AddOrder", ReplyAction="http://tempuri.org/IStoreServ/AddOrderResponse")]
        System.Threading.Tasks.Task<int> AddOrderAsync(int bookId, int quantity, string clientName, string clientAddress, string clientEmail, int origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreServ/CheckOrder", ReplyAction="http://tempuri.org/IStoreServ/CheckOrderResponse")]
        System.Data.DataTable CheckOrder(string clientEmail, int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreServ/CheckOrder", ReplyAction="http://tempuri.org/IStoreServ/CheckOrderResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> CheckOrderAsync(string clientEmail, int orderId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStoreServChannel : StoreApp.StoreService.IStoreServ, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StoreServClient : System.ServiceModel.ClientBase<StoreApp.StoreService.IStoreServ>, StoreApp.StoreService.IStoreServ {
        
        public StoreServClient() {
        }
        
        public StoreServClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StoreServClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StoreServClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StoreServClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable GetBooks() {
            return base.Channel.GetBooks();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetBooksAsync() {
            return base.Channel.GetBooksAsync();
        }
        
        public int AddOrder(int bookId, int quantity, string clientName, string clientAddress, string clientEmail, int origin) {
            return base.Channel.AddOrder(bookId, quantity, clientName, clientAddress, clientEmail, origin);
        }
        
        public System.Threading.Tasks.Task<int> AddOrderAsync(int bookId, int quantity, string clientName, string clientAddress, string clientEmail, int origin) {
            return base.Channel.AddOrderAsync(bookId, quantity, clientName, clientAddress, clientEmail, origin);
        }
        
        public System.Data.DataTable CheckOrder(string clientEmail, int orderId) {
            return base.Channel.CheckOrder(clientEmail, orderId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> CheckOrderAsync(string clientEmail, int orderId) {
            return base.Channel.CheckOrderAsync(clientEmail, orderId);
        }
    }
}
